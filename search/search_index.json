{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vue.js studies","text":"<p>A progressive framework to be used in existing js app if needed. It is reactive using the data binding mode.</p> <p>Update</p> <p>02/2023 migrate to version 3</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To isolate the development environment the DockerfileForNode give us all we need to run vuejs app.</p> <pre><code>docker build -f DockerfileForNode -t jbcodeforce/nodejs .\n</code></pre> <p>jbcodeforce/nodejs  is node v19.6 with yarn and vue@cli. So better to use this environment with the command:</p> <pre><code>docker run -ti -v $(pwd):/app -p 8080:8080 -p 5173:5173 jbcodeforce/nodejs bash </code></pre> <p>Use <code>./startDevEnv.sh</code> script.</p> <p>Vue CLI is currently in maintenance mode and no longer the default tooling used to build Vue applications. Vuetify projects are now generated using vite.</p>"},{"location":"#create-basic-project","title":"Create basic project","text":"<pre><code>npm init vue@latest\ncd &lt;projectname&gt;\nnpm install\nnpm run dev\n</code></pre> <p>Enter the project name and answer no to all other questions (in fact when using pinia for store data between component, select it and also may be Lint for code quality control). To get the web pages visible from the host, modify the <code>package.json</code> on the dev statement with <code>vite --host</code> .</p> <p>As an alternate we can use vue cli (which seems to be in maintenance mode, and vite may replace it):</p> <pre><code>vue create hello-world\n</code></pre> <p>And finally as we want to use Material and Vuetify, we could also use the vuetify CLI:</p> <pre><code>yarn create vuetify\n</code></pre> <ul> <li>Start server: <code>npm run dev</code> or <code>yarn dev</code></li> <li>Browser to http://localhost:5173, at this time any code change will be visible in the browser.</li> </ul> <p>See tutorial</p>"},{"location":"#basic-concepts","title":"Basic concepts","text":"<ul> <li>First the <code>index.html</code> page includes the vuejs scripts and a <code>&lt;div id=\"app\"&gt;</code> to hook the vue app.</li> </ul> <pre><code>&lt;body&gt;\n  &lt;div id=\"app\"&gt;&lt;/div&gt;\n  &lt;script type=\"module\" src=\"/src/main.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <ul> <li>The <code>main.js</code> defines the Vue app instance, links it to the single page app, renders the application and mounts the components to the <code>#app</code> of the index.html.</li> </ul> <pre><code>import { createApp } from 'vue'\nimport App from './App.vue'\n\nimport './assets/main.css'\n\ncreateApp(App).mount('#app')\n</code></pre> <ul> <li>The <code>App.vue</code> defines the root component, page template, css and the components to use. When using router to navigate between page it includes the router-view element.</li> <li>Components are used in html template as element.</li> <li>CSS styles that will be applied to this component and any child component of this component</li> <li>Data is interpolated via {{}} in html. </li> </ul> <pre><code>&lt;template&gt;\n &lt;div class=\"hello\"&gt;\n   &lt;h1&gt;{{ msg }}&lt;/h1&gt;\n</code></pre> <p>and can be object or property and declared in the component. Below props are the input parameters the user of the component can use to inject data, like the msg.</p> <pre><code>export default {\nname: 'HelloWorld',\nprops: {\nmsg: String\n}\n}\n</code></pre> <ul> <li>Data object can be injected via data binding in a reactive way: when properties of this data object change, Vue reacts to and digests the changes.</li> </ul> <pre><code>// in template\n&lt;HelloWorld :msg=\"message\"/&gt;\n// ... in script section\ndata(){\nreturn {\nmessage: 'Hello World!'\n}\n}\n</code></pre> <ul> <li>VueJS requires data to be a function so that each instance of the component can maintain an independent copy of the returned data object.</li> <li><code>v-model</code> is used to manipulate component data.</li> </ul>"},{"location":"#organize-code","title":"Organize code","text":"<ul> <li>Keep images in assets</li> <li><code>components</code> folder includes reusable components like header, footer... </li> <li><code>main.js</code> defines the Vue app and load router and other components</li> <li><code>App.vue</code> includes the application template with Header, Footer... and the result of the URL routing (see later section). </li> </ul> <pre><code>&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;Header/&gt;\n    &lt;router-view/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre> <ul> <li>Define a header with logout, and links to other content external to the app</li> <li>Define content of the Home.vue with a left menu to comeback to the Home page. </li> <li>Add a <code>stores</code> folder to keep pinia store declaration. See next section.</li> </ul>"},{"location":"#sharing-data-between-components","title":"Sharing data between components","text":"<ul> <li> <p>The first technique for passing data is with <code>props</code>. They allow us to transfer data from a parent to a child component.</p> </li> <li> <p>2nd one is to emit Events from a child component to its parent component. In the child component: the username is the data and changeUsername is the event type.</p> </li> </ul> <pre><code>&lt;form action=\"submit\" @submit.prevent=\"$emit('changeUsername', username)\"&gt;\n      &lt;input \n                type=\"text\" \n                v-model=\"username\" \n                placeholder=\"Enter your name\" /&gt;\n      ...\n</code></pre> <p>And in the parent calling the child passing the callback function to use to process the event. username is an attribute inside the parent now.</p> <pre><code>&lt;ChildComponent\n      @changeUsername=\"\n        (payload) =&gt; { username = payload;\n        }\n      \"\n    /&gt;\n</code></pre>"},{"location":"#pinia","title":"Pinia","text":"<ul> <li>Finally, Stores introduce an advanced method of passing data across multiple components by eliminating the problem of prop drilling. Popular state management tools for Vue.js include Pinia or Vuex (that is not recommended anymore).</li> </ul> <p>Initialize pinia in the <code>main.js</code> file</p> <pre><code>import { createPinia } from 'pinia'\n//....\nconst app = createApp(App)\n\napp.use(createPinia())\n</code></pre> <p>Then use the store in a view or component:</p> <pre><code>\n</code></pre> <p>See a complete tutorial in this article: Vue 3 and state management with Pinia and code in <code>vue-pinia</code> folder.</p>"},{"location":"#inventory-app-notes","title":"Inventory app notes","text":"<p>See code in inventory-html folder</p> <ul> <li>To make the image dynamic, use the data binding, where the place in the template is linked to the data source:  <code>&lt;img v-bind:src=\"image\"&gt;</code></li> <li>Use <code>v-if, v-else-if, v-else</code> to control element display</li> <li>If your app needs an element to frequently toggle on and off the page, you\u2019ll want to use the v-show directive. An element with this directive on it will always be present in our DOM, but it will only be visible on the page if its condition is met. It will conditionally add or remove the CSS property display: none to the element</li> <li>The v-for directive allows us to iterate over an array to display data. We can loop over an array of objects and use dot notation to display values from the objects. When using v-for it is recommended to give each rendered element its own unique key.</li> <li> <p>The v-on directive is used to allow elements to listen for events</p> </li> <li> <p>The shorthand for v-on is @</p> </li> <li>You can specify the type of event to listen for: click, mouseover, any other DOM event</li> <li>The v-on directive can trigger a method, Triggered methods can take in arguments</li> <li> <p><code>this</code> refers to the current Vue instance\u2019s data as well as other methods declared inside the instance</p> </li> <li> <p>Data can be bound to an element\u2019s style attribute, an element\u2019s class. We can use expressions inside an element\u2019s class binding to evaluate whether a class should appear or not.</p> </li> <li>Computed properties calculate a value rather than store a value.</li> <li> <p>Components are blocks of code, grouped together within a custom element. They make applications more manageable by breaking up the whole into reusable parts that have their own structure and behavior. </p> </li> <li> <p>Data on a component must be a function</p> </li> <li> <p>Props are used to pass data from parent to child. We can specify requirements for the props a component is receiving. Props are fed into a component through a custom attribute. Props can be dynamically bound to the parent\u2019s data</p> </li> <li> <p>Vue dev tools provide helpful insight about your components</p> </li> </ul>"},{"location":"#app-router","title":"App router","text":"<p>vue-router helps to link components to route.</p> <ul> <li>Define a router object in the main.js. This is from the last router version, and using vite server.</li> </ul> <pre><code>import {createRouter, createWebHistory } from 'vue-router'\nimport Home from '@/components/Home.vue'\nimport Login from '@/components/Login.vue'\n\nconst router = createRouter({\nhistory: createWebHistory(),\nroutes: [\n{\npath: '/',\nname: 'home',\ncomponent: Home\n}]\n})\n\ncreateApp(App)\n.use(router)\n.mount('#app')\n</code></pre> <ul> <li>The router instance can be accessed in any component via <code>this.$router</code></li> <li>Change the main App.vue by adding a content and a <code>router-view</code> object, remove the component declaration in the script section</li> </ul> <pre><code>&lt;v-content&gt;\n  &lt;v-container&gt;\n    &lt;router-view /&gt;\n  &lt;/v-container&gt;\n&lt;/v-content&gt; \n</code></pre> <ul> <li>We  can test with the different paths defined in the routes. </li> <li>URL can have parameter that can be accessed in the component:</li> </ul> <pre><code>const routes = [\n// dynamic segments start with a colon\n{ path: '/users/:id', component: User },\n]\n</code></pre> <p>and access it via: <code>this.$route.params</code></p> <ul> <li>To add control over the URL access, like access to a view only of the user is authenticated, we need to use Guard.</li> </ul> <pre><code>\n</code></pre>"},{"location":"#some-interesting-components","title":"Some interesting components","text":""},{"location":"#rich-text-editor","title":"Rich text editor","text":"<p>Vue2 Editor and used in person-manager app:</p> <pre><code>&lt;v-col cols=\"12\"&gt;\n&lt;vue-editor v-model=\"item.text\"&gt;&lt;/vue-editor&gt;\n&lt;/v-col&gt;\n\n...\nimport { VueEditor } from \"vue2-editor\"\nexport default {\ncomponents: {\nCardList,\nVueEditor\n},\n</code></pre>"},{"location":"#vue-app-with-quarkus-app","title":"Vue app with quarkus app","text":"<p>Here are the steps to integrate Vue app in a Quarkus app and develop both in parallel:</p> <ul> <li>Add frontend-maven-plugin into the pom.xml to be able to build the JS app with maven:</li> </ul> <pre><code>&lt;!-- in properies--&gt;\n&lt;version.frontend-maven-plugin&gt;1.10.0&lt;/version.frontend-maven-plugin&gt;\n&lt;version.resources-plugin&gt;3.2.0&lt;/version.resources-plugin&gt;\n&lt;!-- in plugins --&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;com.github.eirslett&lt;/groupId&gt;\n&lt;artifactId&gt;frontend-maven-plugin&lt;/artifactId&gt;\n&lt;version&gt;${version.frontend-maven-plugin}&lt;/version&gt;\n&lt;configuration&gt;\n&lt;workingDirectory&gt;webapp&lt;/workingDirectory&gt;\n&lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> <ul> <li>Create the vue app under the <code>webapp</code> folder: <code>vue create webapp</code></li> <li>Remove src/main/resources/META-INF/resources/index.html from quarkus app</li> <li>Using the maven resource plugin, add to the pom the copy of the built webapp to the directory used by Quarkus</li> </ul> <pre><code>&lt;plugin&gt;\n&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;\n&lt;version&gt;${version.resources-plugin}&lt;/version&gt;\n&lt;executions&gt;\n&lt;execution&gt;\n&lt;id&gt;copy-resources&lt;/id&gt;\n&lt;phase&gt;process-resources&lt;/phase&gt;\n&lt;goals&gt;\n&lt;goal&gt;copy-resources&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;configuration&gt;\n&lt;outputDirectory&gt;${basedir}/target/classes/META-INF/resources/&lt;/outputDirectory&gt;\n&lt;resources&gt;\n&lt;resource&gt;\n&lt;directory&gt;webapp/dist&lt;/directory&gt;\n&lt;filtering&gt;false&lt;/filtering&gt;\n&lt;/resource&gt;\n&lt;/resources&gt;\n&lt;/configuration&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre> <ul> <li>Could add a maven profile to update the UI dependencies, but could also be done by <code>Vue</code> and <code>yarn</code> build.</li> <li>Add a build UI maven profile, </li> </ul> <pre><code>&lt;profile&gt;\n&lt;id&gt;Build the UI&lt;/id&gt;\n&lt;activation&gt;\n&lt;property&gt;\n&lt;name&gt;ui.dev&lt;/name&gt;\n&lt;/property&gt;\n&lt;/activation&gt;\n&lt;build&gt;\n&lt;plugins&gt;\n&lt;plugin&gt;\n&lt;groupId&gt;com.github.eirslett&lt;/groupId&gt;\n&lt;artifactId&gt;frontend-maven-plugin&lt;/artifactId&gt;\n&lt;executions&gt;\n&lt;execution&gt;\n&lt;id&gt;yarn run build&lt;/id&gt;\n&lt;goals&gt;\n&lt;goal&gt;yarn&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;configuration&gt;\n&lt;arguments&gt;run build --output-hashing=all&lt;/arguments&gt;\n&lt;/configuration&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n&lt;/plugin&gt;\n&lt;/plugins&gt;\n&lt;/build&gt;\n&lt;/profile&gt;\n</code></pre> <p>To build the webapp for production. This could be run with:</p> <pre><code>mvn package quarkus:dev -Dui.deps -Dui.dev\n\n# OR in the vue folder do\nyarn build # in root folder\nmvn package -DskipTests\n</code></pre> <ul> <li>When doing development run the <code>vue serve</code> and <code>quarkus:dev</code> into two different terminals but add a proxy configuration (file vue.config.js) for vue to match /api route to backend, and uses another port than 8080:</li> </ul> <p><code>js  module.exports = {   devServer: {     proxy: {       '^/api': {         target: 'http://localhost:8080',         changeOrigin: true       },     },      port: 4545   } }</code></p> <ul> <li>Add Quarkus resource with API definition</li> </ul> <pre><code>    @GET\n@Path(\"hello\")\n@Produces(MediaType.TEXT_PLAIN)\npublic String hello() {\nreturn \"hello a toi l etranger\";\n}\n</code></pre> <ul> <li>Install axios as a library to access remote server: <code>yarn install axios</code></li> <li>Add calls to api using axios in the component which needs the data.</li> </ul> <pre><code>import axios from 'axios\nexport default {\n  name: 'HelloWorld',\n  data() { return {\n    msg: ''\n  }\n  },\n  mounted() {\n    axios.get('/api/v1/persons/hello').then(resp =&gt; (this.msg= resp.data ))\n}\n}\n</code></pre>"},{"location":"#vue-service-to-call-backend-api","title":"Vue service to call backend api","text":"<p>To call backend API, we need to add service and use the Promise based HTTP client: axios with some Vue samples, here</p>"},{"location":"#load-reference-data","title":"Load reference data","text":"<pre><code>import axios from \"axios\";\nexport default {\ndata: () =&gt; ({\nstores: [],\n}),\nmethods: {\ninitialize () {\naxios.get(\"/api/v1/stores\").then((resp) =&gt; (this.stores = resp.data));\n}\n}\n}\n</code></pre>"},{"location":"#vue-app-deployment","title":"Vue app deployment","text":"<p>See product doc on deployment.</p> <p>If the front end is a pure static app, it can be served by a http server. We need to properly use Cross Origin Resource Sharing.</p> <p>Get a docker file with build stage to use <code>nodejs</code> and <code>npm</code>to build the front end page under <code>dist</code> folder, and a runtime stage that use <code>nginx</code> to expose the app. Add a nginx configuration.</p> <pre><code>FROM node:latest as build-stage\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY ./ .\nRUN npm run build\n\nFROM nginx as production-stage\nRUN mkdir /app\nCOPY --from=build-stage /app/dist /app\nCOPY nginx.conf /etc/nginx/nginx.conf\n</code></pre> <p>See example in BetterToDoFrontEnd project.</p> <p>For getting access to back end service, use environment variables and in the axios code use something like (see product doc):</p> <pre><code>const client = axios.create({\nbaseURL: process.env.VUE_APP_BASE_URL\n});\n</code></pre> <p>See quarkus section above for deployment with BFF.</p>"},{"location":"#serving-vueapp-with-python","title":"Serving VueApp with Python","text":"<p>The static folder includes the outcome of the vuejs build.</p> <pre><code>@app.route(\"/\")\ndef vueApp():\n    return send_from_directory('./static','index.html')\n</code></pre>"},{"location":"#more-reading","title":"More Reading","text":"<ul> <li>Getting started article </li> <li>Vue-JS mastery course</li> <li>Carbon Design System</li> <li>How To Serve Vue.js Application With NGINX and Docker and product documentation</li> <li>Cognito - Vuejs</li> </ul>"},{"location":"carbon/","title":"Vue carbon components","text":"<p>Carbon uses two type of set: production or sketch kit. Production is for developing product based web app. Different themes from white to dark.</p> <p>See product doc</p>"},{"location":"carbon/#install","title":"Install","text":"<p>Once Vue project is created add carbon components.</p> <pre><code>yarn add carbon-components @carbon/vue @carbon/icons-vue\n</code></pre>"},{"location":"carbon/#import-carbon-component-style","title":"Import carbon component style","text":"<p>In <code>main.js</code> import carbon components:</p> <pre><code>import 'carbon-components/css/carbon-components.css';\nimport CarbonComponentsVue from '@carbon/vue/src/index';\n\nVue.use(CarbonComponentsVue);\n</code></pre>"},{"location":"carbon/#2xgrid","title":"2xGrid","text":"<p>16 columns can be combined in different grid layout: 1 column, 2, 4, 8 columns</p> <ul> <li>Grid has margins for the edge</li> <li>Padding inside around container: always 16px</li> <li>Gutter padding of 32px around containers</li> <li>Three modes: <ul> <li>wide with 32px gutter</li> <li>Narrow: 16px gutter</li> <li>condensed: 1px gutter</li> </ul> </li> </ul> <p>To install it:</p> <pre><code>yarn add @carbon/grid\n</code></pre> <p>In order to use the grid, we need to wrap everything in a <code>&lt;div class=\"bx--grid\"&gt;</code></p> <p>See carbon-tutorial-vue folder.</p>"},{"location":"vuetify/","title":"Vuetify","text":"<p>Vuetify is a complete UI framework built on top of Vue.js to build rich user experiences and use Material Design with a mobile first approach.</p> <p>Installation instructions.</p>"},{"location":"vuetify/#example-building-a-login-page","title":"Example building a login page","text":"<ul> <li>Create a vue project named vuetify-login-demo</li> </ul> <pre><code>vue create vuetify-login-demo\n</code></pre> <ul> <li>Add the Vuetify plugin to Vue with</li> </ul> <pre><code>cd vuetify-login-demo\nvue add vuetify\n</code></pre> <p>It creates a vuetify.js to inject the vuetify components inside the vue app. For example the main.js is modified to include vuetify</p> <pre><code>import App from './App.vue'\nimport vuetify from './plugins/vuetify'\nimport { loadFonts } from './plugins/webfontloader'\n\nloadFonts()\n\ncreateApp(App).use(vuetify).mount('#app')\n</code></pre> <p>So <code>main.css</code> was removed from the <code>assets</code> folder, and webfontloader was added.</p> <p>The <code>src/App.vue</code> file includes components prefixed with <code>v-</code>. Similar to how Vue uses the prefix to indicate Vue-specific directives, this is how Vuetify indicates that these components are part of its library.</p> <ul> <li>Add a Login.vue in components folder and base it with Vuetify v-text-field</li> <li>Remove the  v-main</li> </ul> <pre><code>  &lt;v-main&gt;\n    &lt;HelloWorld/&gt;\n  &lt;/v-main&gt;\n</code></pre> <p>then add a v-card component to be the main container for the login module.</p> <ul> <li>Add <code>v-card-title</code> which provides standard spacing and positioning for the card header and <code>v-card-text</code> to act as the wrapper for the body content in the v-card.</li> </ul> <pre><code>&lt;template&gt;\n&lt;v-app id=\"app\"&gt;\n  &lt;v-card&gt;\n    &lt;v-card-title&gt;\n      &lt;h1&gt;Login&lt;/h1&gt;\n    &lt;/v-card-title&gt;\n    &lt;v-card-text&gt;\n      &lt;v-form&gt;\n        &lt;v-text-field label=\"Username\" /&gt;\n      &lt;/v-form&gt;\n    &lt;/v-card-text&gt;\n  &lt;/v-card&gt;\n&lt;/v-app&gt;\n&lt;/template&gt;\n</code></pre> <ul> <li>Add password field in the <code>v-form,</code> and add button with the v-card-action</li> </ul> <pre><code>&lt;v-card-text&gt;\n  &lt;v-form&gt;\n    &lt;v-text-field label=\"Username\" /&gt;\n    &lt;v-text-field \n      type=\"Password\"\n      label=\"Password\" \n    /&gt;\n  &lt;/v-form&gt;\n&lt;/v-card-text&gt;\n&lt;v-card-actions&gt;\n  &lt;v-btn&gt;Register&lt;/v-btn&gt;\n  &lt;v-btn&gt;Login&lt;/v-btn&gt;\n&lt;/v-card-actions&gt;\n</code></pre> <ul> <li>Style the module: can add <code>prepend-icon</code> and append-icon</li> </ul> <pre><code>&lt;v-text-field \n    label=\"Username\" \n    prepend-icon=\"mdi-account-circle\"/&gt;\n&lt;v-text-field \n    type=\"Password\"\n    label=\"Password\" \n      prepend-icon=\"mdi-lock\"\n      append-icon=\"mdi-eye-off\"\nn/&gt;\n</code></pre> <ul> <li>Add some color on buttons</li> </ul> <pre><code>&lt;v-card-actions&gt;\n  &lt;v-btn color=\"success\"&gt;Register&lt;/v-btn&gt;\n  &lt;v-btn color=\"info\"&gt;Login&lt;/v-btn&gt;\n&lt;/v-card-actions&gt;\n</code></pre> <ul> <li>Clean the layout: set the card width to  400px, add spacing to the top and centering it Vuetify CSS utility classes mt-5 (i.e., margin top 5 units) and mx-a (i.e., horizontal margin auto). The spacing between login and the username input is also a little large.</li> <li>Add <code>v-spacer</code> and <code>v-divider</code>.</li> <li>Toggle Password Visibility: add a data property of showPassword, and use the <code>v-bind</code> directive to determine whether the type of the field will be text or password</li> </ul> <pre><code>&lt;v-text-field \n    :type=\"showPassword ? 'text' : 'password'\" \n    label=\"Password\" \n    prepend-icon=\"mdi-lock\"\n    append-icon=\"mdi-eye-off\"\n/&gt;\n</code></pre> <p>add a click event to the icon <code>@click:append=\"showPassword = !showPassword\"</code> and  change to a visibility icon:</p> <p><pre><code>&lt;v-text-field \n    :type=\"showPassword ? 'text' : 'password'\" \n    label=\"Password\" \n    prepend-icon=\"mdi-lock\"\n    append-icon=\"mdi-eye-off\"\n    :append-icon=\"showPassword ? 'mdi-eye' : 'mdi-eye-off'\"\n    @click:append=\"showPassword = !showPassword\"\n/&gt;\n</code></pre> * Add data binding using input object:</p> <pre><code>data: () =&gt; ({\ninput: { username: \"\", password: \"\"}\n})\n</code></pre> <p>And then use <code>v-model</code> to bind the data from the text field to the variables.</p> <pre><code> &lt;v-text-field label=\"Username\"  v-model=\"input.username\"/&gt;\n&lt;v-text-field label=\"Password\"  v-model=\"input.password\"/&gt;\n</code></pre> <ul> <li>Add login methods in the script section:</li> </ul> <pre><code>  methods: {\nlogin() {\nalert('Hello ' + this.input.username + ' !')\n}\n}\n</code></pre> <ul> <li> <p>Use Pinia to persist username and other global variables in Store. </p> </li> <li> <p>The last piece is to add calls to remote service to register or login.</p> </li> </ul>"},{"location":"vuetify/#layout","title":"Layout","text":"<p>Vuetify comes with a built-in layout system. There are 2 primary layout components in Vuetify, <code>v-app</code> and <code>v-main</code>.  The <code>v-app</code> component is the root of your application and a direct replacement for the default Vue entrypoint, <code>&lt;div id=\"app\"&gt;</code> The <code>v-main</code> component is a semantic replacement for the main HTML element and the root of  your application\u2019s content</p> <p>See doc here</p> <p>Grid integrates a series of containers, rows, and columns to layout and align content</p>"},{"location":"vuetify/#padding-and-marging","title":"Padding and Marging","text":"<p>Add class with letters: <code>m</code> for marging, <code>p</code> for padding. See this tutorial</p>"}]}